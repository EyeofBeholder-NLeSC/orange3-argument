:py:mod:`processor`
===================

.. py:module:: processor

.. autoapi-nested-parse::

   Argument processor module.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   processor.get_argument_topics
   processor.get_argument_sentiment
   processor.get_argument_coherence
   processor.update_argument_table



.. py:function:: get_argument_topics(arg_ids: List[int], topics: List[int]) -> List[Tuple[int]]

   Get argument topics.

   The topics of an argument is a combination of the topics of all chunks that belong to this argument. Duplications are not removed, and the reason behind is that duplications can be treated as a sign of topic importance. Also, even though two chunks can belong to the same topic, they could still have different ranks within an argument.

   :param arg_ids: the argument ids of chunks.
   :type arg_ids: List[int]
   :param topics: the topic indices of chunks.
   :type topics: List[int]

   :returns: list of argument topics, which is also a list containing topic indices of chunks belonging to this argument.
   :rtype: List[list[int]]


.. py:function:: get_argument_sentiment(arg_ids: List[int], ranks: List[float], p_scores: List[float], min_sent: int = -1, max_sent: int = 1) -> List[float]

   Get argument sentiment score.

   The sentiment score of an argument is calculated as a weighted sum of sentiment scores of chunks belonging to this argument, where weights are ranks of the chunks. The result score is then normalized into range [0, 1].

   :param arg_ids: the argument ids of chunks.
   :type arg_ids: List[int]
   :param ranks: the pagerank of chunks within arguments.
   :type ranks: List[float]
   :param p_scores: the sentiment polarity scores of chunks.
   :type p_scores: List[float]
   :param min_sent: minimun of argument sentiment before normalization. Defaults to -1.
   :type min_sent: int
   :param max_sent: maximum of argument sentiment before normalization. Defaults to 1.
   :type max_sent: int

   :returns: List of argument sentiment scores, which are floats in range [0, 1].
   :rtype: List[float]


.. py:function:: get_argument_coherence(scores: List[int], sentiments: List[float], min_score: int = 1, max_score: int = 5, variance: float = 0.2) -> List[float]

   Get argument coherence.

   Coherence is computed as inversed difference between sentiments and overall scores. Overall scores are first normalized into the same range as argument sentiments, which is [0, 1]. Then their differences are computed and applied a Gaussian kernal to invert and scale the differences to [0, 1].

   :param scores: List of argument overall scores.
   :type scores: List[int]
   :param sentiments: List of argument sentiment scores.
   :type sentiments: List[float]
   :param min_score: Lower bound of scores. Defaults to 1.
   :type min_score: int, optional
   :param max_score: Upper bound of scores. Defaults to 5.
   :type max_score: int, optional
   :param variance: variance of the Gaussian kernal.
   :type variance: float

   :returns: List of argument coherence scores, in range of (0, 1]
   :rtype: List[float]


.. py:function:: update_argument_table(df_arguments: pandas.DataFrame, topics: List[List[int]], sentiments: List[float], coherences: List[float]) -> pandas.DataFrame

   Return a copy of argument dataframe, with new columns of argument topics, sentiments, and coherences.

   :param df_arguments: argument dataframe.
   :type df_arguments: pd.DataFrame
   :param topics: list of argument topics
   :type topics: List[List[int]]
   :param sentiments: list of argument sentiment scores
   :type sentiments: List[float]
   :param coherences: list of argument coherence scores
   :type coherences: List[float]

   :returns: _description_
   :rtype: pd.DataFrame


