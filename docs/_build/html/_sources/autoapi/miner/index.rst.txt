:py:mod:`miner`
===============

.. py:module:: miner

.. autoapi-nested-parse::

   Argument mining module



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   miner.select_by_topic
   miner.get_edges
   miner.get_edge_weights
   miner.get_edge_table
   miner.get_node_labels
   miner.get_node_table



.. py:function:: select_by_topic(data: pandas.DataFrame, topic: int) -> pandas.DataFrame

   Select arguments mentioning the given topic.

   :param data: The argument dataframe that must contain the 'topics' column.
   :type data: pd.DataFrame
   :param topic: The given topic to select.
   :type topic: int

   :raises ValueError: if the 'topics' value of an argument is stored as something else other than a tuple (e.g. a list).

   :returns: Part of the original argument dataframe that only contains arguments mentioning the given topic.
   :rtype: pd.DataFrame


.. py:function:: get_edges(data: pandas.DataFrame) -> List[Tuple[int]]

   Get edges from argument dataframe.

   Edges (attacks) only exist if the two arguments have different overall scores. Edges are tuple of source and target, which are indices of the corresponding argument in the input dataframe.

   :param data: The argument dataframe that must have the 'score' column.
   :type data: pd.DataFrame

   :returns: The edge list.
   :rtype: List[Tuple[int]]


.. py:function:: get_edge_weights(data: pandas.DataFrame, edges: List[Tuple[int]]) -> List[float]

   Get edge weights.

   Edge weights are computed as the difference between the coherence of the source and that of the target.

   :param data: The argument dataframe that must have the 'coherence' column.
   :type data: pd.DataFrame
   :param edges: The edge list.
   :type edges: List[Tuple[int]]

   :returns: The list of edge weights.
   :rtype: List[float]


.. py:function:: get_edge_table(edges: List[Tuple[int]], weights: List[float]) -> pandas.DataFrame

   Get the edge dataframe.

   There will be three columns in the output dataframe, which are 'source', 'target', and 'weight'. Together, they describe weighted directed edges from source to target argument. Note that there will be no negative weights in the output dataframe, instead, all values will be replace with their absolute values. For edges with negative weights, we swap their source and target.

   :param edges: The edge list, which are tuples of source and target argument ids.
   :type edges: List[Tuple[int]]
   :param weights: The list of edge weights.
   :type weights: List[float]

   :raises ValueError: if size of the input lists doesn't match.

   :returns: The result edge dataframe.
   :rtype: pd.DataFrame


.. py:function:: get_node_labels(indices: List[int], sources: List[int], targets: List[int]) -> List[str]

   Get labels of arguments given the attacking network.

   Arguments are separated into two classes, 'supportive' and 'defeated', which generally means reliable and unreliable. The rule of detecting the labels is as follows: if an argument is attacked by another argument who is not attacked by any argument, then this argument is labeled as 'defeated'; otherwise, it's labeled as 'supportive'. That means, if an argument appears in `targets`, where its corresponding source doesn't, this argument will be labeled as 'defeated', and otherwise 'supportive'.

   :param indices: The node index list
   :type indices: List[int]
   :param sources: The source list of the attacking network.
   :type sources: List[int]
   :param targets: The target list of the attacking network.
   :type targets: List[int]

   :returns: The label list.
   :rtype: List[str]


.. py:function:: get_node_table(arg_ids: List[int], arguments: List[str], scores: List[int], labels: List[str]) -> pandas.DataFrame

   Get the node dataframe.

   The node dataframe will contain 4 columns, that are 'argument_id', 'argument', 'score', and 'label'.

   :param arg_ids: The argument id list.
   :type arg_ids: List[int]
   :param arguments: The argument text list.
   :type arguments: List[str]
   :param scores: The list of argument overall score.
   :type scores: List[int]
   :param labels: The argument label list.
   :type labels: List[str]

   :returns: The result node dataframe.
   :rtype: pd.DataFrame


